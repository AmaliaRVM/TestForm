{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","message","email","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","e","preventDefault","_this$state","axios","get","concat","params","then","response","console","log","catch","err","react_default","a","createElement","className","src","logo","alt","onSubmit","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qSCsEzBC,cAhEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,UAAU,GACVC,QAAQ,GACRC,MAAM,IAERV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IACpBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IARRA,4EAWDe,GACXZ,KAAKa,SAALf,OAAAgB,EAAA,EAAAhB,CAAA,GACGc,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,6CAKzBC,GACXA,EAAEC,iBADW,IAAAC,EAEyBpB,KAAKI,MAAnCC,EAFKe,EAELf,UAAWC,EAFNc,EAEMd,QAASC,EAFfa,EAEeb,MAC5Bc,IAAMC,IAAN,GAAAC,OACA,0CADA,aACsD,CACtDC,OAAQ,CACNnB,YACAC,UACAC,WACGkB,KAAK,SAACC,GACRC,QAAQC,IAAIF,KACZG,MAAM,SAACC,GACPH,QAAQC,IAAIE,sCAKf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAYzCN,EAAAC,EAAAC,cAAA,QAAMK,SAAUtC,KAAKW,cACnBoB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOvB,KAAK,YAAYwB,YAAY,YAAYvB,MAAOjB,KAAKI,MAAMC,UAAWoC,SAAUzC,KAAKQ,eACxGuB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOvB,KAAK,UAAUwB,YAAY,UAAUvB,MAAOjB,KAAKI,MAAME,QAASmC,SAAUzC,KAAKQ,eAClGuB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOvB,KAAK,QAAQwB,YAAY,QAAQvB,MAAOjB,KAAKI,MAAMG,MAAOkC,SAAUzC,KAAKQ,eAC5FuB,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,WAEFR,EAAAC,EAAAC,cAAA,UAAKjC,KAAKI,MAAMC,oBAzDNqC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.74ec0491.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      firstName:\"\",\n      message:\"\",\n      email:\"\"\n    }\n    this.handleChange = this.handleChange.bind(this) \n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  \n  handleChange(event){\n    this.setState({\n      [event.target.name]: event.target.value\n\n    })\n  }\n  \n  handleSubmit(e){\n    e.preventDefault()\n    const { firstName, message, email } = this.state\n    axios.get(`${process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : \n    'https://safe-harbor-38503.herokuapp.com'}/api/form`, {\n    params: {\n      firstName,\n      message,\n      email\n    } }).then((response)=>\n      {console.log(response)\n    }).catch((err)=>\n      {console.log(err)\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn Reacts\n        </a> */}\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"firstName\" placeholder=\"FirstName\" value={this.state.firstName} onChange={this.handleChange}/>\n          <input type=\"text\" name=\"message\" placeholder=\"Message\" value={this.state.message} onChange={this.handleChange}/>\n          <input type=\"text\" name=\"email\" placeholder=\"email\" value={this.state.email} onChange={this.handleChange}/>\n          <button type=\"submit\">button</button>\n        </form>\n        <h1>{this.state.firstName}</h1>\n      \n      </header>\n    </div>\n    )\n  }     \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}